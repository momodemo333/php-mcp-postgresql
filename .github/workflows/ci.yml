name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3']
        postgres-version: ['13', '14', '15']
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: pdo, pdo_pgsql
        coverage: xdebug
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Initialize test database
      env:
        PGPASSWORD: testpass
      run: |
        psql -h localhost -U testuser -d testdb -f tests/fixtures/init.sql
    
    - name: Run tests
      env:
        PGSQL_HOST: localhost
        PGSQL_PORT: 5432
        PGSQL_USER: testuser
        PGSQL_PASS: testpass
        PGSQL_DB: testdb
        ALLOW_INSERT_OPERATION: true
        ALLOW_UPDATE_OPERATION: true
        ALLOW_DELETE_OPERATION: true
      run: |
        php tests/test_connection.php
        php tests/test_mcp_server.php
    
    - name: Run PHPUnit tests (if available)
      if: matrix.php-version == '8.3'
      env:
        PGSQL_HOST: localhost
        PGSQL_PORT: 5432
        PGSQL_USER: testuser
        PGSQL_PASS: testpass
        PGSQL_DB: testdb
      run: |
        if [ -f vendor/bin/phpunit ]; then
          vendor/bin/phpunit --coverage-text
        else
          echo "PHPUnit not installed, skipping unit tests"
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: pdo, pdo_pgsql
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Check code style (if configured)
      run: |
        if [ -f vendor/bin/phpcs ]; then
          vendor/bin/phpcs
        fi
    
    - name: Static analysis (if configured)
      run: |
        if [ -f vendor/bin/phpstan ]; then
          vendor/bin/phpstan analyse
        fi

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t php-mcp-postgresql:test .
        docker run --rm php-mcp-postgresql:test --version
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Push to Docker Hub
      if: github.event_name == 'release'
      run: |
        docker tag php-mcp-postgresql:test momodemo333/php-mcp-postgresql:latest
        docker tag php-mcp-postgresql:test momodemo333/php-mcp-postgresql:${{ github.event.release.tag_name }}
        docker push momodemo333/php-mcp-postgresql:latest
        docker push momodemo333/php-mcp-postgresql:${{ github.event.release.tag_name }}

  release:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Update version in composer.json
      run: |
        VERSION=${{ github.event.release.tag_name }}
        VERSION=${VERSION#v}  # Remove 'v' prefix if present
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" composer.json
    
    - name: Create release artifact
      run: |
        tar -czf php-mcp-postgresql-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git' \
          --exclude='vendor' \
          --exclude='tests/fixtures/*.sql' \
          .
    
    - name: Upload release artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./php-mcp-postgresql-${{ github.event.release.tag_name }}.tar.gz
        asset_name: php-mcp-postgresql-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip